# Azure Pipeline
# Builds docker image and release to DEV

trigger:
  batch: true
  branches:
    include:
      - 'release/*'

variables:
- group: adp-test-variables
- name: KRM3_DATABASE_URL
  value: postgres://postgres:test@localhost:5432/test

resources:
  containers:
  - container: postgres
    image: postgres:11
    env:
       POSTGRES_PASSWORD: test
       POSTGRES_HOST_AUTH_METHOD: trust
       PGDATA: /var/lib/postgresql/data
    ports:
       - 5432:5432/tcp

services:
  postgres: postgres

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
      versionSpec: '3.6'
      architecture: 'x64'

- script: |
    mkdir -p /tmp/krm3/media/invites
    mkdir -p /tmp/krm3/media/tmp
    sudo apt-get install -y libssl-dev
  displayName: 'Install os dependencies'


- script: |
    pip3 install --upgrade pip wheel poetry==1.1.13
    poetry config repositories.wfp https://worldfoodprogramme.pkgs.visualstudio.com/_packaging/WFPPythonPackages/pypi/simple/
    poetry config http-basic.wfp WFPPythonPackages $(WFP_PACKAGE_REPO_TOKEN)
    poetry config virtualenvs.create false
  displayName: 'sdist'

- bash: |
    poetry build -f sdist
    poetry export --with-credentials --without-hashes -f requirements.txt > dist/requirements.txt
  displayName: 'building package'

- script: |
    poetry install -vv
  displayName: 'Install dependencies and package'

- script: |
    python -m py.test tests --create-db --junitxml=pytest.xml -vv \
        --cov-report=xml --cov-report=html --cov-report=term \
        --cov-config=tests/.coveragerc \
        --cov=krm3
  env:
    SOCIAL_AUTH_AZUREAD_OAUTH2_KEY: $(SOCIAL_AUTH_AZUREAD_OAUTH2_KEY)
    SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET: $(SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET)
    WFP_OIDC_CLIENT_CLIENT_ID: $(SOCIAL_AUTH_AZUREAD_OAUTH2_KEY)
    WFP_OIDC_CLIENT_CLIENT_SECRET: $(SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET)
    CAPI_USERNAME: $(CAPI_USERNAME)
    CAPI_PASSWORD: $(CAPI_PASSWORD)
    GATEWAY_CLIENT_ID: $(GATEWAY_CLIENT_ID)
    GATEWAY_CLIENT_SECRET: $(GATEWAY_CLIENT_SECRET)
    KRM3_DATABASE_URL: $(KRM3_DATABASE_URL)
  displayName: 'Run tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "pytest.xml"
    testResultsFormat: 'JUnit'
    testRunTitle: 'Test with Python $(PYTHON_VERSION)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/pytest.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/~build/coverage'
    searchFolder: '$(system.defaultworkingdirectory)/tests'

- bash: |
    echo "##vso[task.setvariable variable=VERSION]"`grep "^VERSION=" docker/Makefile | cut -d "=" -f 2`
  displayName: 'Finding version number'

#- bash: |
#    sed 's/ONBUILD //g' docker/Dockerfile.onbuild  > docker/Dockerfile.full
#    cat docker/Dockerfile.full
#  displayName: 'Generating Dockerfile.full'

- bash: |
      docker build \
      --build-arg AZURE_PYPI_TOKEN=$(WFP_PACKAGE_REPO_TOKEN) \
      --build-arg CONTAINER_NAME=$(CONTAINER_NAME) \
      --build-arg VERSION=$(VERSION) \
      -t wfp-fdp:$VERSION \
      -t wfp-fdp:latest \
      -f docker/Dockerfile .
  displayName: 'Build image'

