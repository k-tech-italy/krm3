name: Build and Deploy

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  attestations: write
  actions: write
  packages: write
  contents: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      # :one: Checkout completo del repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      # :two: Bump versione e aggiornamento changelog
      - name: "Bump version and update the changelog"
        id: commitizen
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changelog_increment_filename: "INCREMENTAL-CHANGELOG.md"

      # :three: Push commit e tag generati
      - name: Push bump commit and tags to master
        run: |
          git push origin master
          git push origin --tags

      # :four: Sync develop con master
      - name: Sync develop with master
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          gh auth setup-git
          gh pr list --base develop --head master || \
          gh pr create \
            --base develop \
            --head master \
            --title "Sync develop with master (auto)" \
            --body "Automatic sync after version bump" \
            --assignee "@me" \
            --label "auto-sync" \
            --fill \
            --draft=false \
            --merge


  build-frontend:
    needs: [bump]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
          enable-cache: true
          prune-cache: false
          cache-local-path: ./uv-cache
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          python-version: 3.12.1

      - name: Restore cached vEnv
        id: cache-venv-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ./uv-cache
            ./tox
          key: ${{ runner.os }}-venv-3.12

      - name: Install dependencies
        run: uv sync --cache-dir ./uv-cache --frozen

      - name: Save vEnv
        id: cache-venv-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./uv-cache
            ./tox
          key: ${{ steps.cache-venv-restore.outputs.cache-primary-key }}

      - name: Init Frontend Submodule
        run: cd krm3-fe && git submodule update --init

      - name: Install yarn and build frontend
        run: cd krm3-fe && npm install -g yarn && yarn install && yarn build

      - name: Build static folder
        run: uv venv && uv run make release && uv run manage.py collectstatic

      - name: Move the release.json file into the FE folder
        run: cp src/krm3/core/static/release.json krm3-fe/dist

      - name: Upload built frontend
        uses: actions/upload-artifact@v4
        with:
          name: built-frontend
          path: |
            krm3-fe/dist/
          retention-days: 1
          if-no-files-found: warn

  build-and-push:
    needs: [build-frontend]
    if: always() && needs.build-frontend.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_name: ${{ steps.build.outputs.image_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
          enable-cache: true
          prune-cache: false
          cache-local-path: ./uv-cache
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          python-version: 3.12.1

      - name: Download built frontend
        if: needs.build-frontend.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: built-frontend
          path: krm3-fe/dist/

      - name: build
        id: build
        run: |
          VERSION=$( uvx --with hatch-vcs hatchling metadata version )
          COMMIT_SHA=$(git rev-parse "$GITHUB_SHA")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "image_name=ghcr.io/${{ github.repository }}:$VERSION" >> $GITHUB_OUTPUT
          echo "::notice title=VERSION:: Build local package $VERSION"
          echo "::notice title=COMMIT:: Build local package $COMMIT_SHA"
          uv build --sdist
          uv export --no-dev --no-emit-project --group image --format requirements-txt > dist/image-requirements.txt
          uv run manage.py tailwind install
          uv run manage.py tailwind build

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          target: final
          build-args: |
            BASE_IMAGE=${{ steps.build.outputs.version }}
            DOCKER_REGISTRY=local
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.build.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [ build-and-push ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Call Rancher API redeploy
        env:
          RANCHER_URL: ${{ vars.RANCHER_URL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
        run: |
          response=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $RANCHER_TOKEN" \
            "$RANCHER_URL")
          http_code="${response: -3}"
          if [ "$http_code" -ne 200 ]; then
            echo "Deployment failed with HTTP $http_code"
            exit 1
          fi
          echo "Deployment successful"
# release part 
  release:
    needs: [deploy]
    if: needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: release-approval   # manual approve
    permissions:
      contents: write
    steps:
      - name: Wait for manual approval
        run: echo " Environment approved, starting release redeploy..."

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Call Rancher API redeploy after release
        env:
          RANCHER_URL: ${{ vars.RANCHER_URL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
        run: |
          response=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $RANCHER_TOKEN" \
            "$RANCHER_URL")
          http_code="${response: -3}"
          if [ "$http_code" -ne 200 ]; then
            echo "Redeploy failed with HTTP $http_code"
            exit 1
          fi
          echo "Redeploy successful after release"




