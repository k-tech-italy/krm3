# Generated by Django 5.1.8 on 2025-04-15 12:16

import datetime
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import krm3.missions.media
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('currencies', '0003_alter_rate_rates'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('default', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='PO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(max_length=50)),
                ('is_billable', models.BooleanField(default=True)),
                ('state', models.TextField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed')], default='OPEN')),
                ('start_date', models.DateField(default=datetime.datetime(2020, 1, 1, 0, 0, tzinfo=datetime.timezone.utc))),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'PO',
                'verbose_name_plural': 'POs',
            },
        ),
        migrations.CreateModel(
            name='Reimbursement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, help_text='Set automatically if left blank')),
                ('year', models.PositiveIntegerField(blank=True)),
                ('title', models.CharField(help_text='Set automatically if left blank', max_length=120)),
                ('issue_date', models.DateField(auto_now_add=True)),
                ('paid_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('picture', models.TextField(blank=True, null=True)),
                ('social_profile', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('initial_capacity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('follows', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='followed_by', to='core.basket')),
                ('po', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.po')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('default_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='currencies.currency')),
            ],
            options={
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.country')),
            ],
            options={
                'verbose_name_plural': 'cities',
            },
        ),
        migrations.CreateModel(
            name='ExpenseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.expensecategory')),
            ],
            options={
                'verbose_name_plural': 'expense categories',
            },
        ),
        migrations.CreateModel(
            name='InvoiceEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Number of hours to charge', max_digits=10)),
                ('basket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoice_entries', to='core.basket')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='core.invoice')),
            ],
            options={
                'verbose_name_plural': 'Invoice entries',
            },
        ),
        migrations.CreateModel(
            name='PaymentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('personal_expense', models.BooleanField(default=False)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.paymentcategory')),
            ],
            options={
                'verbose_name_plural': 'payment categories',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.client')),
            ],
            options={
                'permissions': [('view_any_project', "Can view(only) everybody's projects"), ('manage_any_project', "Can view, and manage everybody's projects")],
            },
        ),
        migrations.AddField(
            model_name='po',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project'),
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=9)),
                ('number', models.PositiveIntegerField(blank=True, help_text='Set automatically if left blank', null=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('year', models.PositiveIntegerField(blank=True, help_text="Leave blank for defaulting to from_date's year", null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.city')),
                ('default_currency', models.ForeignKey(blank=True, help_text='Leave blank for default [EUR]', null=True, on_delete=django.db.models.deletion.PROTECT, to='currencies.currency')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.project')),
            ],
            options={
                'permissions': [('view_any_mission', "Can view(only) everybody's missions"), ('manage_any_mission', "Can view, and manage everybody's missions")],
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField()),
                ('amount_currency', models.DecimalField(decimal_places=2, help_text='Amount in currency', max_digits=10)),
                ('amount_base', models.DecimalField(blank=True, decimal_places=2, help_text='Amount in EUR', max_digits=10, null=True)),
                ('amount_reimbursement', models.DecimalField(blank=True, decimal_places=2, help_text='Reimbursed amount', max_digits=10, null=True)),
                ('detail', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to=krm3.missions.media.mission_directory_path)),
                ('created_ts', models.DateTimeField(auto_now_add=True)),
                ('modified_ts', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(blank=True, help_text='Leave blank to inherit from mission.default_currency', on_delete=django.db.models.deletion.PROTECT, to='currencies.currency')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.documenttype')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.expensecategory')),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='core.mission')),
                ('payment_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.paymentcategory')),
                ('reimbursement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expenses', to='core.reimbursement')),
            ],
            options={
                'permissions': [('view_any_expense', "Can view(only) everybody's expenses"), ('manage_any_expense', "Can view, and manage everybody's expenses")],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, help_text='Overwritten by profile.first_name if profile is provided', max_length=50)),
                ('last_name', models.CharField(blank=True, help_text='Overwritten by profile.last_name if profile is provided', max_length=50)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='reimbursement',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.resource'),
        ),
        migrations.AddField(
            model_name='mission',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.resource'),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('basket_title', models.CharField(blank=True, max_length=200, null=True)),
                ('color', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField(default=datetime.datetime(2020, 1, 1, 0, 0, tzinfo=datetime.timezone.utc))),
                ('end_date', models.DateField(blank=True, null=True)),
                ('work_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('on_call_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('travel_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('overtime_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.resource')),
            ],
        ),
        migrations.CreateModel(
            name='TimeEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('work_hours', models.DecimalField(decimal_places=2, max_digits=4)),
                ('sick_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('holiday_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('leave_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('overtime_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('on_call_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('travel_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('rest_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('state', models.TextField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed')], default='OPEN')),
                ('comment', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.resource')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_entries', to='core.task')),
            ],
            options={
                'verbose_name_plural': 'Time entries',
                'permissions': [('view_any_timesheet', "Can view(only) everybody's timesheets"), ('manage_any_timesheet', "Can view, and manage everybody's timesheets")],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.TextField(blank=True, null=True)),
                ('social_profile', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.userprofile'),
        ),
        migrations.AddConstraint(
            model_name='city',
            constraint=models.UniqueConstraint(fields=('name', 'country'), name='unique_city_in_country'),
        ),
        migrations.AddConstraint(
            model_name='expensecategory',
            constraint=models.UniqueConstraint(fields=('title', 'parent'), name='unique_expense_category_title'),
        ),
        migrations.AddConstraint(
            model_name='paymentcategory',
            constraint=models.UniqueConstraint(fields=('title', 'parent'), name='unique_payment_category_title'),
        ),
        migrations.AddConstraint(
            model_name='po',
            constraint=models.UniqueConstraint(fields=('ref', 'project'), name='unique_ref_project_in_po'),
        ),
        migrations.AddConstraint(
            model_name='reimbursement',
            constraint=models.UniqueConstraint(models.F('year'), models.F('number'), name='unique_reimbursement_number'),
        ),
        migrations.AddConstraint(
            model_name='mission',
            constraint=models.UniqueConstraint(fields=('number', 'year'), name='unique_mission_number_year'),
        ),
    ]
